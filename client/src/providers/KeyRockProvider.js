import React, { useState, useEffect, createContext } from "react";
import jwtDecode from "jwt-decode";
import { getKeyrockTokenApi } from "../api/auth";

export const KeyRockContext = createContext();

export default function KeyRockProvider(props) {
  const { children } = props;
  const [tokenKeyrock, settokenKeyrock] = useState({
    tokenKeyrock2: null,
    isLoading2: true,
    rawtokenKeyrock2: null,
  });
  //console.log("useEffect");
  //Siempre se va a ejecutar si está registrado
  useEffect(() => {
    checkUserLoginKeyRock(settokenKeyrock);
  }, []);

  return (
    <KeyRockContext.Provider value={tokenKeyrock}>
      {children}
    </KeyRockContext.Provider>
    // Aqui lo que estamos haciendo es envolver todo el Router de App.js que es lo que es el children y le estamos pasando el valor de user a toda la web Ej ver LayoutAdmin como consume del contexto el user
  );
}

//Checkeamos si el usuario está registrado
function checkUserLoginKeyRock(settokenKeyrock) {
  //console.log("checkUserLogin");
  //Obtengo el access token

  // console.log("----------------------KEYROCK1--------------------");
  var accessToken = getKeyrockTokenApi();
  accessToken ="eyJ0eXAiOiJKV1QiLCJ4NWMiOlsiTUlJRXlUQ0NBN0dnQXdJQkFnSUlWdTJjYktwNllYTXdEUVlKS29aSWh2Y05BUUVMQlFBd1BERTZNRGdHQTFVRUF3d3hWRVZUVkNCcFUwaEJVa1VnUlZVZ1NYTnpkV2x1WnlCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlU0JITlRBZUZ3MHlNakExTVRNeE1URTJNVEJhRncweU5UQTFNVEl4TVRFMk1EbGFNRlV4RmpBVUJnTlZCQU1NRFVOaGNHbHNiR0Z5WDFSbGMzUXhHekFaQmdOVkJBVVRFa1ZWTGtWUFVra3VSVk5EUVZCSlRFeEJVakVSTUE4R0ExVUVDZ3dJUTJGd2FXeHNZWEl4Q3pBSkJnTlZCQVlUQWtWVE1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBdHZTMTdtTm9lRlorak1DWFY2VEhIaXRQUHF6dThKd1RNQzNOUXgremtGaSs3QUhLcHNXR1RZa3RvU3NzYnZkS01wSFQwbjlVUE5sZVFERXdyMEE2bUZGOTQ0UmxobmxGV3M2N1pHWkN3clVrYVFLS0hsRy84ZzRHa1BTVncwYjZoRm84Uk56UzNaMlN0dk14VENlRklmaTd2dHFSWDMwMzg4UEFsK2xmV295b01lRnNhcVFLd1RSUTYrYzRhVlNQaHJuV0UrWDk2aER3RFRybVV0U1JoMzZmSE1NMGlXSkRGcHZqWjdMYzgxVHJ0MGFWRFFlMkxYaDh2dER2SExhY1NUa3NXNFUwMzlaY2FvM2d1Q1ZGVVFyRlZUcUlsc0VOUlhJUDJNNm82UUpWb3dCcytMd1Fzb3cvSmJ0dUlJSUxibmlESWVzNUQyczdza3o3NzF1eU1sVVA0YmladjhvUmlCK1ZFQm5BTzRKZndVdGpUbThLYW0zcWd1OVUxanpzUTRZN2VhTXlLYjFvSUFLcEtMc0szUVlNR0NwazlVMzdEd1ZQS1U3b2EyalA5L3VlY29KQzBkdTdBYm1rOU1BSXpsdFNQdVJSU1p2N09qcjhpYUZObHcrdkJaR2VIUURoWjZjTmQybW4vNWVPaDhTa0oweFlXRlh6dGV3QmlFQlFKNjhzckNOUzI4dFlHYW1tS0xGTS81S0NERm5KYzdQRXcyVHRwc09hY0pIQ0wzdUtVWCs4N1ZzOXR5WHdWVm82U0NxbWVocG9abysvTkM4eVNiZGg0MFd3VDRTZm90aDNNaXFQNDAxM25wVXduZkZtNGRYbUdYODhmMGk5OTMyaW1XdWJtYWZ0dE9wS2RNUjExWlJZRVNTSDhaeUQvakE4bXpNRUhhZzF5d3NDQXdFQUFhT0J0VENCc2pBZkJnTlZIU01FR0RBV2dCUnR4V1dKeTkrUlZORnJQTGNDcFM3TmltaVFIVEFuQmdOVkhTVUVJREFlQmdnckJnRUZCUWNEQWdZSUt3WUJCUVVIQXdRR0NDc0dBUVVGQndNQk1EY0dDQ3NHQVFVRkJ3RURCQ3N3S1RBSUJnWUVBSTVHQVFFd0NBWUdCQUNPUmdFRU1CTUdCZ1FBamtZQkJqQUpCZ2NFQUk1R0FRWUNNQjBHQTFVZERnUVdCQlQrNWJwQlpxUk1LK1hNSDFQY1RGZUhQeU5FVURBT0JnTlZIUThCQWY4RUJBTUNCc0F3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQURES0IwVmFTMW1DSWdybjc5dWtyc0pnSkZBMFdlUzc3R3RyUkxlcE9sajZyZkJacU9zaHVLVzdZY3hrMUhRQTZGeXB0SWl2akQwazFwanpPUjVvVks0cmN6N28veWZTVjhYLzdjcUlTenl6aVJsb3FtQzNKZWM4VFUrN0hUZGRta3kvMklZcFVmak40UFZiQlNDQW5xT2dHWlJXVGFnLy9yYkRQY3luLzczMkdKZEtkYXYybnFEYjZRaXkveS9FN3VoMGZVL3NHTWduaTZDOTNUdlBoRFdCZ3BjTHZyYWFvRmNkVHVuNitEUnlvQ0NjdUw3aWV5UU9oTG5wR0p2ZEo2L1BSRU5XaDl0MTA3cERURWs2S05EYkFoSjltY0dnMlFIdEw5WFY1MHNGblFEUVJKMHBqUWREME15aUZ3eVpzVnNsamM0MmkvVEZrMFBGSzdLN09ubz0iLCJNSUlEU0RDQ0FqQ2dBd0lCQWdJSVN4UjNJbXpHMUJjd0RRWUpLb1pJaHZjTkFRRUxCUUF3SnpFbE1DTUdBMVVFQXd3Y1ZFVlRWQ0JwVTBoQlVrVWdSbTkxYm1SaGRHbHZiaUJsU1VSQlV6QWVGdzB4T1RBeU1qSXhNREEwTXpGYUZ3MHpPVEF5TVRjeE1EQXlORGxhTUR3eE9qQTRCZ05WQkFNTU1WUkZVMVFnYVZOSVFWSkZJRVZWSUVsemMzVnBibWNnUTJWeWRHbG1hV05oZEdsdmJpQkJkWFJvYjNKcGRIa2dSelV3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREhCMkFCUUw3endtaTF4SWtPMGEycTZqSUpkbjNRQW0wczFsU2VRZXY5RjJGM001WjhxaXFRSmF1ck1aeXdaZmROdmc5K0lxR0hPakRlNmhJaHVSenpvQW8wQWJPNE45T2RmMlJERFU5NU43dG9KbUF5Q2lZR2daZlp0N0JzS0ZJZVE2cDZDc2dLY1JYUGkwZmRYZFZTSHA0YlpmUU9RZGNsTWJ0SVRpcm5GdFUwNk5QQWhvWTY3Nll6OTZ4RkFFMHpvbTZlTVZQUE9JbTBHOGdkNDRYbG5iTDB3MG1jY0NpMlZVWmp2Q0lMNTlPNjFPOHZsVnlMc0JxTk5UQ3ZmOUMyQ01ZYUVhdFhaeXovbHdnSDZKWUh0RDB1c1h0LytNMHFLWWUxb2VvTGswWmljRlpYY2sxaVMwOWtGZGdnSzVCbE5vZG9XSmFEQlJybzUxV2hZMlduQWdNQkFBR2pZekJoTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SHdZRFZSMGpCQmd3Rm9BVWxaTWt5YnloQ3pLNUhPQkZIS1JPK01MU1IvNHdIUVlEVlIwT0JCWUVGRzNGWlluTDM1RlUwV3M4dHdLbExzMkthSkFkTUE0R0ExVWREd0VCL3dRRUF3SUJoakFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBWkg1UWp1cStPOUZwdjYzN2cwY0Y2bjFJTFlCTHoxZU5aakVCM2RvQWV4dmk1Q3pTdzNvc3dKQ1NlZEdXM2hoMHFIT1RLMmdJODNqaDBXMkVBbjJpc0Znd2hNb0cyamQyWVNGU2ttOFEvMmVPZmM2TWdHU0M1c09UTDc1SjdieUxDb3JkcWQvTjRlYWozRXFLTGFXcTdyN3VzdFA4MVA4RUlsejBEOGE3bGZmMUZTbzIzSFdYVFdYMittMnZvTEFFNWw5N2FHVEdSUzFVYnhoUDJqRktZSjlYemlLZTlNUUpTWkVsVFE4anFnMmtQRmtFeC9YcUFXcWxHMWRsMXl3TEpxNWllUHZLMVI0QVlOSS9ZYlpRazlzbGo4ditQLzZNN0V0RXJzZjJ1SVNnZXdMVGNXbDI0eDNuRzV4YlFaeHJQOGwyalNHWW1PVEluZ0tPUVNuYmZnPT0iLCJNSUlETXpDQ0FodWdBd0lCQWdJSUJMVTJjWkFacUxFd0RRWUpLb1pJaHZjTkFRRUxCUUF3SnpFbE1DTUdBMVVFQXd3Y1ZFVlRWQ0JwVTBoQlVrVWdSbTkxYm1SaGRHbHZiaUJsU1VSQlV6QWVGdzB4T1RBeU1qSXhNREF5TkRsYUZ3MHpPVEF5TVRjeE1EQXlORGxhTUNjeEpUQWpCZ05WQkFNTUhGUkZVMVFnYVZOSVFWSkZJRVp2ZFc1a1lYUnBiMjRnWlVsRVFWTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDckRQMkRXWDMvYjh1TWFwekVCQVRTYTZpWmZ2Z2d6SUJVRXhrV0ViRzllMW5WeS9qUWsyMG5mU0ZNVW1SVDZOaFljZGtTWU8vV3JraTlZNEVwQ3kxeHZaSHFMKzRZNlM5Skxad0o3NjBMcFlsZStOYVZ1N21pbk1VUWN1b2o1bkt6Q2x2YXpiMDBBeDVna0pVZlIzdjNYNUdYcVFya1dhek10K2s1VE5NNlRXdUozMHFPZndySHg1dlRMbVRVVWloK0JzR0wzZjVHT3MxVlRZSUNOaGlUak43NG4yV3FwMmtVTFdJZSsvWDZSWi9oS3NwYUhHWm5LRFZUd0krOFptV0ZlanV4QTZET1g3UnNZTEt2UU8yMUZtYklCb1NzOUF6djU5L1J4V1VKVk1PMFdoRGhLcFFnQ0dqd2dWMzJvZk5ka0ZnbWRWdWx6TlBJRDJSTmJUVExBZ01CQUFHall6QmhNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdId1lEVlIwakJCZ3dGb0FVbFpNa3lieWhDeks1SE9CRkhLUk8rTUxTUi80d0hRWURWUjBPQkJZRUZKV1RKTW04b1FzeXVSemdSUnlrVHZqQzBrZitNQTRHQTFVZER3RUIvd1FFQXdJQmhqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFsemFCVmFGaFptSDl1eHNMU3YzRmtreFdWd0JSMUdoQXh3Y0psVjR4K2txWDh0Y2hKNFNETEV1V1JyRjRETnR2U1IzcjY5S3o4ZVlJNVh1VzFlRzEyWWpHR1ZsWWlqZHhyRzFBTnpHbjJ2ZG85dkw3ZEVGVUVNSzFBS3hSc3RiVGRFN3l3eklWL0M2MXc4SnJ4d0x0dDlPamRVRVVQSHVHVGp1djVuRkJQZEZ6T2N2dStEVE1sNzNDSlAyemVaVUZndWo1NU1zWFk0NU1yWHJiZ3QrTEpxVXU0cGtCMmJMdTlGYmVSTFdaSnVrbllTclc0ZnlRQloyaStNc0dkaUJLUWNmM2ZMWGpwY2g0OC9wN1NpVGs0dWZsb0JhcVRDbHQvRXRXWERTbUZjdjRRakJrMW1VUHU5dnhpa2NIRGtBdkpyT1hHZzBiKzNlSTRhN09UZkFiMWc9PSJdLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJFVS5FT1JJLkVTQ0FQSUxMQVIiLCJzdWIiOiI1ZWRiZWZhNS1iM2M2LTQ5OTQtYWQyNy0zZGRjZTIyNTI5NDYiLCJqdGkiOiJhY2Q4Y2E4Zi1mMzBlLTRkOWYtYThhNS1hMTdlM2MyOTIwODYiLCJpYXQiOjE2NjkzOTk1ODcsImV4cCI6MTY2OTQwMzE4NywiYXVkIjoiRVUuRU9SSS5FU0NBUElMTEFSIiwiZW1haWwiOiJwYWJsb0BjYXBpbGxhci5pdCIsImRlbGVnYXRpb25FdmlkZW5jZSI6eyJ0YXJnZXQiOnsiYWNjZXNzU3ViamVjdCI6IjVlZGJlZmE1LWIzYzYtNDk5NC1hZDI3LTNkZGNlMjI1Mjk0NiJ9LCJub3RCZWZvcmUiOjE2Njc1MjAwMDAsInBvbGljeVNldHMiOlt7InRhcmdldCI6eyJlbnZpcm9ubWVudCI6eyJsaWNlbnNlcyI6WyJJU0hBUkUuMDAwMSJdfX0sInBvbGljaWVzIjpbeyJydWxlcyI6W3siZWZmZWN0IjoiUGVybWl0In1dLCJ0YXJnZXQiOnsiYWN0aW9ucyI6WyJHRVQiLCJQT1NUIiwiUEFUQ0giXSwicmVzb3VyY2UiOnsidHlwZSI6IkRWNENVTFNJTVVMQVRJT04iLCJhdHRyaWJ1dGVzIjpbIioiXSwiaWRlbnRpZmllcnMiOlsiKiJdfX19LHsicnVsZXMiOlt7ImVmZmVjdCI6IlBlcm1pdCJ9XSwidGFyZ2V0Ijp7ImFjdGlvbnMiOlsiKiJdLCJyZXNvdXJjZSI6eyJ0eXBlIjoiR1BTREVWSUNFIiwiYXR0cmlidXRlcyI6WyIqIl0sImlkZW50aWZpZXJzIjpbIioiXX19fV0sIm1heERlbGVnYXRpb25EZXB0aCI6MH1dLCJub3RPbk9yQWZ0ZXIiOjE2NzI1MzExOTksInBvbGljeUlzc3VlciI6IkVVLkVPUkkuRVNDQVBJTExBUiJ9fQ.GxyOakihHfz7KkMwLOKwhWsliLLyvAMjzHDQjSmY92aRMfa0Xg5QlpUILtl1z9W2CaQkOHI5seL4UK6EH_p95YPshiQub0PK1Mf0vm38lJPO9sDKXeZ2mRucEy_baeX3es5OojxmuOpRmxOtBmdwimnJcSygNuDBJEAwYEqzY66Cjfs23N09FBxZc0B3EdVq8zL7KcyIl3vN1NYGsz8tUAmlvUeuUpqNYUMey-z9AMvnuof2QFd0BQqn089vbjvxZx8yqOM7yLjy7mmP_71m90Vke4FH3yep_cJhvKPqOBZFvGLwNdEowPuPywoGAYXhxGggQTt0XWxCDyhqW9NcEC3ORduPJ-ocSsAuX_38HSujcX0TgwHT76SpQlwrvmJMyFk5TzvboFD50iqQNnhrLlU121a-9F-Q1m6TWPPQQnQ4PVgcHpFh6DIqVMK2q7GZFNT9Bd03I6XWgJ9zGU3RO5gfxeCwgYL9el2u_0-l5tXyW9m7eINSfZhvIrMc2tgojL1-xW06Loym6mzc_IlmlN4tK1is0FCVQ7hEKkTUzy_WAG3iWsUcefRwPdtiJcl2P6J58ukJ6xUKzI4OdwNkW16LPnPGNURnL5UYo2Cn4o6DAy0nug31o67EJGlg3DfwQZNilnNAZUFUPn5uRpdW21HZ9IE3-x81eqpkVuFNthE";
  // console.log(jwtDecode(accessToken));
  // console.log("----------------------KEYROCK2--------------------");
  //TODO: Harcoded
  
  try {
    settokenKeyrock({
      isLoading2: false,
      tokenKeyrock2: jwtDecode(accessToken),
      rawtokenKeyrock2: accessToken, 
      /* tokenKeyrock2: jwtDecode(accessToken),
      rawtokenKeyrock2: accessToken, */
    });
  } catch {}
}
